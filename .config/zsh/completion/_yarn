#compdef yarn

_yarn() {
  local line state

  _arguments \
    '1: :->commands' \
    '*::args:->args'

  case "$state" in
    commands)
      _commands
      _scripts
      ;;
    args)
      case ${line[1]} in
        run)
          _scripts
          ;;
        remove)
          _deps
          ;;
        upgrade)
          _deps
          ;;
      esac
      ;;
  esac
}

_commands() {
  _values 'yarn commands' \
    'access' \
    'add' \
    'audit' \
    'autoclean' \
    'bin' \
    'cache' \
    'check' \
    'config' \
    'create' \
    'exec' \
    'generateLockEntry' \
    'global' \
    'help' \
    'import' \
    'info' \
    'init' \
    'install' \
    'licenses' \
    'link' \
    'list' \
    'login' \
    'logout' \
    'node' \
    'outdated' \
    'owner' \
    'pack' \
    'policies' \
    'publish' \
    'remove' \
    'run' \
    'tag' \
    'team' \
    'unlink' \
    'unplug' \
    'upgrade' \
    'upgradeInteractive' \
    'version' \
    'versions' \
    'why' \
    'workspace' \
    'workspaces'
}

__find_package_json() {
  depth=0

  __check_current_dir() {
    if [[ -f "package.json" ]]; then
      pwd
    else
      if [[ "$depth" -lt 30 ]] && [[ "$PWD" != '/' ]]; then
        depth=$((depth + 1))
        cd ..
        __check_current_dir
      else
        echo ''
      fi
    fi
  }

  __check_current_dir
}

_scripts() {
  local package_json_dir scripts

  package_json_dir=$(__find_package_json)

  if [[ -f "$package_json_dir/package.json" ]]; then
    scripts=()
    while IFS='' read -r line; do scripts+=("$line"); done < <(
      jq -r 'if .scripts then . else .scripts = {} end |
        .scripts | keys | .[]' "$package_json_dir/package.json" \
        | grep '\S' | sed -e 's#:#\\:#'
    )
    if [[ "${#scripts[@]}" != 0 ]]; then
      _values 'scripts' "${scripts[@]}"
    fi
  fi
}

_deps() {
  local package_json_dir deps

  package_json_dir=$(__find_package_json)

  if [[ -f "$package_json_dir/package.json" ]]; then
    deps=()
    while IFS='' read -r line; do deps+=("$line"); done < <(
      jq -r 'if .dependencies then . else .dependencies = {} end |
        if .devDependencies then . else .devDependencies = {} end |
        [.dependencies, .devDependencies] | .[] | keys | .[]' "$package_json_dir/package.json" \
        | grep '\S' | sed -e 's#:#\\:#'
    )
    if [[ "${#deps[@]}" != 0 ]]; then
      _values 'deps' "${deps[@]}"
    fi
  fi
}
