#!/usr/bin/env bash

set -euo pipefail

BOLD=$(tput bold)
UNDERLINE=$(tput smul)
NORMAL=$(tput sgr0)

cache_file=''

filename_mode_original='Original'
filename_mode_index='Indexed'
filename_mode=''

urls_not_cached=()

usage() {
  cat << EOL
${BOLD}USAGE:${NORMAL}
  download-urls [${UNDERLINE}OPTIONS${NORMAL}] [${UNDERLINE}URLS${NORMAL}...]
  download-urls [-O|-I] [--cache ${UNDERLINE}CACHE_FILE${NORMAL}] [${UNDERLINE}URLS${NORMAL}...]
  download-urls --help

${BOLD}OPTIONS:${NORMAL}
  ${BOLD}-O, --original-filename${NORMAL}
    Save with original filename

  ${BOLD}-I, --indexed${NORMAL}
    Save with original filename with leading index number

  ${BOLD}--cache${NORMAL} ${UNDERLINE}CACHE_FILE${NORMAL}
    Cache successfully downloaded URLs to the cache file and
    skip download from next time

  ${BOLD}--help${NORMAL}
    Show this message
EOL
}

check_cache() {
  url=${1:-}

  if [[ ! "$url" ]]; then
    echo "Missing url for check_cache" 1>&2
    exit 1
  fi

  if [[ ! -f "$cache_file" ]]; then
    echo false
  fi

  while read -r line; do
    [[ "$line" == "$url" ]] && {
      echo true
      return
    }
  done < "$cache_file"

  echo false
}

for OPT in "$@"; do
  case $OPT in
    --help)
      usage
      exit 0
      ;;
    --cache)
      cache_file=${2:-}
      if [[ ! -f "$cache_file" ]]; then
        touch "$cache_file"
      fi

      shift 2
      ;;
    --original-filename | -O)
      filename_mode="$filename_mode_original"
      shift 1
      ;;
    --indexed | -I)
      filename_mode="$filename_mode_index"
      shift 1
      ;;
    -*)
      echo "Unknown option: $1" 1>&2
      exit 1
      ;;
  esac
done

if [[ "$#" == 0 ]]; then
  usage
  exit 0
fi

if [[ "$cache_file" ]]; then
  for url in "$@"; do
    is_cached=$(check_cache "$url")

    if [[ "$is_cached" == false ]]; then
      urls_not_cached+=("$url")
    fi
  done
else
  urls_not_cached+=("$@")
fi

if [[ "${#urls_not_cached[@]}" == 0 ]]; then
  echo 'All urls cached'
  exit 0
fi

if [[ ! "$filename_mode" ]]; then
  filename_mode=$(printf "%s\n%s" \
    "$filename_mode_original" "$filename_mode_index" \
    | fzf --prompt 'Filename mode: ')
fi

if [[ ! "$filename_mode" ]]; then
  exit 0
fi

tmpdir=$(mktemp -d -p .)

i=0
for url in "${urls_not_cached[@]}"; do
  if [[ "$filename_mode" == "$filename_mode_original" ]]; then
    curl -O -J "$url"
  elif [[ "$filename_mode" == "$filename_mode_index" ]]; then
    indexed_dir="$tmpdir/$i"
    mkdir -p "$indexed_dir"
    curl --output-dir "$indexed_dir" -O -J "$url"
  else
    exit 1
  fi

  if [[ "$cache_file" ]]; then
    echo "$url" >> "$cache_file"
  fi

  i=$((i + 1))
done

if [[ "$filename_mode" == "$filename_mode_index" ]]; then
  pushd "$tmpdir" > /dev/null

  dirs_output=$(fd -t d -d 1)
  mapfile -t dirs <<< "$dirs_output"

  for dir in "${dirs[@]}"; do
    dir=$(sed 's@/$@@' <<< "$dir")

    pushd "$dir" > /dev/null

    files_output=$(fd -t f)
    mapfile -t files <<< "$files_output"

    for file in "${files[@]}"; do
      mv "$file" "../$dir-$file"
    done

    popd > /dev/null

    rmdir "$dir"
  done

  popd > /dev/null

  mv "$tmpdir"/* .
  rmdir "$tmpdir"
else
  rmdir "$tmpdir"
fi
