#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat << EOF
USAGE:

  loc <command_name>

  loc --which <command_name>

AVAILABLE COMMANDS:

EOF

  if [[ ! $(loc -l) ]]; then
    echo '  No command available here'
  fi
  for CMD in $(loc -l); do
    echo "  - $CMD"
  done

  cat << EOF

OPTIONS:

  -l, --list-commands   List available commands
  -w, --which           Print command body defined with the command name
  -v, --verbose         Print the command body before execution
  -h, --help            Print this help message

COMMAND DEFINITION:

  Export env variables prefixed with LOC_CMD_, like LOC_CMD_DO_SOMETHING.

    export LOC_CMD_DO_SOMETHING='echo hello'

  The command above can be executed with the form "loc do_something".

    loc do_something world
    # -> echo hello world

  If the command starts with -I{}, all additional args will be inserted
  to the position of {} like the option with the same name of xargs.

    export LOC_CMD_FOO='-I{} mv {} ./dest'
    loc foo aa bb
    # -> mv aa bb ./dest
EOF
}

list_loc_cmds() {
  printenv | grep '^LOC_CMD_' | sed 's/^LOC_CMD_//' | sed 's/=.*//' | sed 's/.*/\L&/' | sort || echo ''
}

get_cmd_body() {
  local cmd_name cmd_body

  cmd_name=${1:-}
  if [[ ! "$cmd_name" ]]; then
    echo "Missing command name for get_cmd_body" 1>&2
    exit 1
  fi

  cmd_body=$(printenv | grep "^LOC_CMD_$cmd_name=" | sed "s/^LOC_CMD_$cmd_name=//" || echo '')
  if [[ ! "$cmd_body" ]]; then
    echo "Command not defined: LOC_CMD_$cmd_name" 1>&2
    exit 1
  fi

  echo "$cmd_body"
}

for OPT in "$@"; do
  case $OPT in
    -h | --help)
      usage
      exit 0
      ;;
    -l | --list-commands)
      list_loc_cmds
      exit 0
      ;;
    -v | --verbose)
      verbose=true
      shift 1
      ;;
    -w | --which)
      command_name_which=${2:-}
      command_name_which=${command_name_which^^}
      if [[ ! "$command_name_which" ]]; then
        echo 'Missing command name for -w option' 1>&2
        echo 'USAGE: loc -w <command_name>' 1>&2
        exit 1
      fi

      get_cmd_body "$command_name_which"
      exit 0
      ;;
    -*)
      echo "Unknown option: $1" 1>&2
      exit 1
      ;;
    *)
      # this should be the command name
      command_name=${1:-}
      command_name=${command_name^^}
      shift

      # the rest will be the free args
      # so we can pass them as they are
      break
      ;;
  esac
done

if [[ ! "${command_name:-}" ]]; then
  echo 'Missing command name' 1>&2
  exit 1
fi

command_body=$(get_cmd_body "$command_name")

if [[ "$command_body" =~ ^-I\{\} ]]; then
  command_body_without_keyword=$(echo $command_body | sed -e 's/-I{}\s*//')

  command_head=${command_body_without_keyword%\{\}*}
  command_tail=${command_body_without_keyword#*\{\} }

  if [[ $# -eq 0 ]]; then
    command="$command_head $command_tail"
  else
    command="$command_head $(printf '%q ' "$@") $command_tail"
  fi
elif [[ $# -eq 0 ]]; then
  command="$command_body"
else
  command="$command_body $(printf '%q ' "$@")"
fi

[[ "${verbose:-false}" == true ]] && echo "$command"
eval "$command"
exit 0
