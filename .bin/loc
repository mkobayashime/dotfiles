#!/usr/bin/env bash

usage() {
  cat << EOF
USAGE:

  loc <command_name>

  loc --which <command_name>

AVAILABLE COMMANDS:

EOF

  if [[ $(loc -l) == '' ]]; then
    echo '  No commands are available here'
  fi
  for CMD in $(loc -l); do
    echo "  - $CMD"
  done

  cat << EOF

OPTIONS:

  -l, --list-commands   List available commands
  -w, --which           Print command body defined with the command name
  -h, --help            Print this help message

COMMAND DEFINITION:

  Export env variables prefixed with LOC_CMD_, like LOC_CMD_DO_SOMETHING.

    export LOC_CMD_DO_SOMETHING='echo hello'

  The command above can be executed with the form "loc do_something".

    loc do_something world
    # -> echo hello world

  If the command starts with -I{}, all additional args will be inserted
  to the position of {} like the option with the same name of xargs.

    export LOC_CMD_FOO='-I{} mv {} ./dest'
    loc foo aa bb
    # -> mv aa bb ./dest
EOF
}

list_loc_cmds() {
  printenv | grep '^LOC_CMD_' | sed 's/^LOC_CMD_//' | sed 's/=.*//' | sed 's/.*/\L&/'
}

get_cmd_body() {
  local cmd_name=$1
  printenv | grep "^LOC_CMD_$cmd_name=" | sed "s/^LOC_CMD_$cmd_name=//"
}

for OPT in "$@"; do
  case $OPT in
    -h | --help)
      usage
      exit 0
      ;;
    -l | --list-commands)
      list_loc_cmds
      exit 0
      ;;
    -w | --which)
      if [[ -z "$2" ]]; then
        echo 'Command name not provided for -w option' 1>&2
        echo 'Usage: loc -w <command_name>' 1>&2
        exit 1
      fi

      get_cmd_body "${2^^}"
      exit 0
      ;;
    -*)
      echo "Unknown option -- ${1/-/}" 1>&2
      exit 1
      ;;
    *)
      # this should be the command name
      command_name=${1^^}
      shift

      # the rest will be the free args
      # so we can pass them as they are
      break
      ;;
  esac
done

if [[ "$command_name" == '' ]]; then
  echo 'Command name not passed' 1>&2
  exit 1
fi

command_body=$(get_cmd_body "$command_name")

if [[ "$command_body" == '' ]]; then
  echo "Command not found: LOC_CMD_$command_name" 1>&2
  exit 1
elif [[ $# -eq 0 ]]; then
  echo "$command_body"
  eval "$command_body"
  exit 0
elif [[ "$command_body" =~ ^-I\{\} ]]; then
  command_body_without_keyword=$(echo $command_body | sed -e 's/-I{}\s*//')
  command_head=${command_body_without_keyword%\{\}*}
  command_tail=${command_body_without_keyword#*\{\} }
  command="$command_head $(printf '%q ' "$@") $command_tail"

  echo "$command"
  eval "$command"
  exit 0
else
  command="$command_body $(printf '%q ' "$@")"

  echo "$command"
  eval "$command"
  exit 0
fi
